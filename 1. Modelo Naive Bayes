{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyORONJX/auZXyED2PyNw+04",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Salomerb-hub/Business-Analytics/blob/main/1.%20Modelo%20Naive%20Bayes\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**MODELO NAIVE BAYES - CATEGORIZACIÓN DE ACCIDENTES**\n",
        "\n",
        "0. Cargar las librerias\n"
      ],
      "metadata": {
        "id": "f1noK4n6mH6n"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd #Conexión con archivos de Excel\n",
        "import numpy as np #Funciones matemáticas\n",
        "\n",
        "from sklearn.naive_bayes import GaussianNB #Modelo Gaussian Naive Bayes (función Gaussina, la exponencial también)\n",
        "from sklearn.metrics import confusion_matrix #Siempre debo tener métricas para un modelo, esto es como lo voy a evaluar"
      ],
      "metadata": {
        "id": "xDlbHr7zmW6P"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "1. Cargar los datos"
      ],
      "metadata": {
        "id": "EUjs9rpxmnNg"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "nxl=\"/content/1. BD2_CarCrash_Int.xlsx\"  #nxl significa name excel, para cargar la base\n",
        "XDB=pd.read_excel(nxl,sheet_name=0)\n",
        "XDB.dropna()   #Para evitar celdas vacías\n",
        "XDB.head(100)   #Que me muetsre 100 datos\n",
        "\n",
        "#Creamos el Data Mart\n",
        "XD=XDB[['Weekday','ViolCat','Month','Daylight','ClearWeather']]   #Variables de entrada\n",
        "yd=XDB[['Highway']]   #Valor deseado que debe aprender el modelo. El modelo va a calcular media, desviación y valor d epertenencia automáticamente\n"
      ],
      "metadata": {
        "id": "UeUhisTgmq0t"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "2. Se procede con la configuración y evaluación del modelo Naive Bayes, que nos sirve en este caso para determinar si el accidente se dio en autopista o no."
      ],
      "metadata": {
        "id": "IDEkBpAFLbJE"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "mnb=GaussianNB()\n",
        "mnb.fit(XD,yd) #Quiero ajustar el modelo a las variables XD y yd (Las variables y la determinante). Entrada XD y salida yd\n",
        "\n",
        "#Analizamos los resultados arrojados por el modelo\n",
        "u=mnb.theta_  #Son las medias de cada variable (las mismas del Excel)\n",
        "print(\"Las medias de las variables son:\\n\",u)\n",
        "sigma=np.sqrt(mnb.var_) #Son las desviaciones de cada variable (las mismas del Excel)\n",
        "print(\"Las desviaciones de las variables son:\\n\",sigma)\n",
        "\n",
        "#Entre que edades se varía para cada grupo de datos.\n",
        "#Se procede con el análisis de las variaciones de las variables\n",
        "LS=u+sigma #Límite superior\n",
        "print(\"Los límites superiores de las variables son:\\n\",LS)\n",
        "LI=u-sigma #Límite inferior\n",
        "print(\"Los límites inferiores de las variables son:\\n\",LI)\n",
        "\n",
        "#Se procede con la evaluación del comportamiento del modelo.\n",
        "ydp=mnb.predict(XD)  #Hizo el pronósitoco de la preaprobación para los solicitantes. Ya no es yd, ahora es y sub d pronósticado.\n",
        "\n",
        "#Matriz de confusión\n",
        "cm=confusion_matrix(yd,ydp) #Matriz de confusión nos dice cómo funcionó el modelo\n",
        "print(\"La matriz de confusión es:\\n\",cm)\n",
        "VN=cm[0,0];FP=cm[0,1];FN=cm[1,0];VP=cm[1,1]\n",
        "\n",
        "Ex=(VP+VN)/len(XD) #Exactitud del modelo\n",
        "print(\"La exactitud del modelo es:\\n\",Ex)\n",
        "\n",
        "Ter=(FP+FN)/len(XD) #Tasa de error del modelo\n",
        "print(\"La tasa de error del modelo es:\\n\",Ter)\n",
        "\n",
        "Sen=VP/(VP+FN) #Sensibilidad del modelo\n",
        "print(\"La sensibilidad del modelo es:\\n\",Sen)\n",
        "\n",
        "Esp= VN/(VN+FP) #Especificidad del modelo\n",
        "print(\"La especificidad del modelo es:\\n\",Esp)\n",
        "\n",
        "Pres=VP/(VP+FP) #Precisión del modelo\n",
        "print(\"La precisión del modelo es:\\n\",Pres)\n",
        "\n",
        "PredNeg= VN/(VN+FN) #Predicción negativa del modelo\n",
        "print(\"La predicción negativa del modelo es:\\n\",PredNeg)\n",
        "\n",
        "#Para evaluar un accidente de tránsito, el accidente #109 de Excel\n",
        "XSC=[[7,1,3,0,1]]\n",
        "ydsc=mnb.predict(XSC)\n",
        "print(\"En este caso el accidente automóvilis ocurrio en:\\n\",ydsc)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BHQpgAgJLmwP",
        "outputId": "de6e6f68-cd06-46aa-a59a-f2feae70397b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Las medias de las variables son:\n",
            " [[3.88945752 6.7778915  5.52548618 0.6814739  0.85261003]\n",
            " [3.82417582 4.31538462 5.47417582 0.70934066 0.79450549]]\n",
            "Las desviaciones de las variables son:\n",
            " [[1.92831125 3.63475806 3.27379337 0.46590475 0.35449426]\n",
            " [1.82800803 2.36793707 3.26215279 0.45406663 0.40406253]]\n",
            "Los límites superiores de las variables son:\n",
            " [[ 5.81776877 10.41264957  8.79927955  1.14737865  1.20710429]\n",
            " [ 5.65218385  6.68332168  8.73632861  1.16340729  1.19856802]]\n",
            "Los límites inferiores de las variables son:\n",
            " [[1.96114628 3.14313344 2.25169281 0.21556915 0.49811577]\n",
            " [1.9961678  1.94744755 2.21202304 0.25527403 0.39044297]]\n",
            "La matriz de confusión es:\n",
            " [[4560  325]\n",
            " [1563  257]]\n",
            "La exactitud del modelo es:\n",
            " 0.7184190902311708\n",
            "La tasa de error del modelo es:\n",
            " 0.2815809097688292\n",
            "La sensibilidad del modelo es:\n",
            " 0.1412087912087912\n",
            "La especificidad del modelo es:\n",
            " 0.9334698055271239\n",
            "La precisión del modelo es:\n",
            " 0.4415807560137457\n",
            "La predicción negativa del modelo es:\n",
            " 0.7447329740323371\n",
            "En este caso el accidente automóvilis ocurrio en:\n",
            " [0]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py:1183: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
            "  y = column_or_1d(y, warn=True)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/base.py:465: UserWarning: X does not have valid feature names, but GaussianNB was fitted with feature names\n",
            "  warnings.warn(\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "3. Creación del informe"
      ],
      "metadata": {
        "id": "SxODcdcfXLXq"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Se procede con la creación del informe\n",
        "XDsal=np.column_stack((XD,ydp,yd))  #Para mostrar columnas juntas\n",
        "df_sal=pd.DataFrame(XDsal)             #Se crea la tabla\n",
        "df_sal.to_excel('Informeaccidentes.xlsx')        #Se crea el archivo excel / se envía a Excel\n",
        "df_sal.head(100)                       #Se muestra en pantalla"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "tYcgeoHJXOLE",
        "outputId": "89dc61a6-7d78-48fe-f286-3836339dbf35"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    0   1  2  3  4  5  6\n",
              "0   7   8  1  1  0  0  0\n",
              "1   1   3  1  0  1  0  0\n",
              "2   2  12  1  0  1  0  0\n",
              "3   4  12  1  1  1  0  0\n",
              "4   3   9  1  0  1  0  0\n",
              ".. ..  .. .. .. .. .. ..\n",
              "95  6   8  3  1  1  0  0\n",
              "96  2   9  4  1  0  0  0\n",
              "97  2   9  4  0  1  0  0\n",
              "98  3  12  4  0  1  0  0\n",
              "99  4   9  4  1  1  0  0\n",
              "\n",
              "[100 rows x 7 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f236e9fd-2098-4e36-946a-a109ae8e2105\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>4</th>\n",
              "      <th>5</th>\n",
              "      <th>6</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>7</td>\n",
              "      <td>8</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>12</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>12</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>3</td>\n",
              "      <td>9</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>95</th>\n",
              "      <td>6</td>\n",
              "      <td>8</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>96</th>\n",
              "      <td>2</td>\n",
              "      <td>9</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>97</th>\n",
              "      <td>2</td>\n",
              "      <td>9</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>98</th>\n",
              "      <td>3</td>\n",
              "      <td>12</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>99</th>\n",
              "      <td>4</td>\n",
              "      <td>9</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>100 rows × 7 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f236e9fd-2098-4e36-946a-a109ae8e2105')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-f236e9fd-2098-4e36-946a-a109ae8e2105 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-f236e9fd-2098-4e36-946a-a109ae8e2105');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-a6594b9c-7570-49cc-af50-f02d52c58254\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a6594b9c-7570-49cc-af50-f02d52c58254')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-a6594b9c-7570-49cc-af50-f02d52c58254 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_sal",
              "summary": "{\n  \"name\": \"df_sal\",\n  \"rows\": 6705,\n  \"fields\": [\n    {\n      \"column\": 0,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 7,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          7,\n          1,\n          6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 1,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 1,\n        \"max\": 12,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          7,\n          3,\n          11\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 2,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 1,\n        \"max\": 12,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          11,\n          10,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 3,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 4,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 5,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 6,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "4. **ANÁLISIS DE RESULTADOS**\n",
        "\n",
        "Los resultados arrojados por el modelo propuesto frente al pronóstico de que un accidente pase en autopista o no muestran que la exactitud del modelo es de 71,84%, lo que indica que, de forma general, de 100 accidentes predice correctamente 71 y se equivoca en 29, que es la tasa de error para el modelo (28,15%). Es un resultado satisfactorio que indica que el modelo en general es bueno. Sin embargo, al mirar más a profundidad los resultados encontramos que, aunque el modelo es muy bueno para predecir aquellos accidentes que no ocurren en autopista (Especificidad de 93,35%), no es bueno para predecir aquellos que si ocurrieron en autopista (Sensibilidad de 14,12%).\n",
        "\n",
        "Además, es importante tener en cuenta que el total de accidentes evaluados es de 6705, de los cuales 1820 (27,14%) fueron en autopista y 4885 (72,86%) no fueron en autopista para evaluar correctamente los resultados según la proporción de cada categoría.\n"
      ],
      "metadata": {
        "id": "9aXczYzkQBBV"
      }
    }
  ]
}